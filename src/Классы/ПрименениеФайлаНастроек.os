#Использовать logos

Перем _Лог;
Перем _файлыОшибок;
Перем _ФайлНастроек;

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент("GENERIC_ISSUE_SETTINGS_JSON", "" ,"Путь к файлу настроек. Например ./generic-issue-settings.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_SETTINGS_JSON");
	
	Команда.Аргумент("GENERIC_ISSUE_JSON", "" ,"Путь к файлам generic-issue.json, на основе которых будет создан файл настроек. Например ./edt-json.json,./acc-generic-issue.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_JSON");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ИнициализацияПараметров(Команда);
	
	таблицаНастроек = ОбщегоНазначения.ПолучитьТаблицуНастроек( _ФайлНастроек );
	_лог.Отладка( "Из файла настроек прочитано: " + таблицаНастроек.Количество() );
	
	Для каждого цФайл Из _файлыОшибок Цикл
		
		ошибкиФайла = ОбщегоНазначения.ПрочитатьJSONФайл( цФайл );
		
		Если Не ТипЗнч( ошибкиФайла ) = Тип("Структура") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ошибкиФайла.Свойство("issues") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ТипЗнч( ошибкиФайла.issues ) = Тип("Массив") Тогда
			
			_Лог.Ошибка( "Не поддерживаемая структура файла: " + цФайл );			
			Продолжить;
			
		КонецЕсли;
		
		файлИзменен = Ложь;
		
		Для каждого цОшибка Из ошибкиФайла.issues Цикл
			
			Если ПрименитьНастройки( цОшибка, таблицаНастроек ) Тогда
				файлИзменен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если файлИзменен Тогда
			
			_лог.Отладка( "Запись в файл: " +  цФайл);
			ОбщегоНазначения.ЗаписатьJSONВФайл(ошибкиФайла, цФайл);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализацияПараметров(Знач Команда)
	
	путьКФайлуНастроек = Команда.ЗначениеАргумента("GENERIC_ISSUE_SETTINGS_JSON");
	файлыОшибок = Команда.ЗначениеАргумента("GENERIC_ISSUE_JSON");
	
	файлНастроек = Новый Файл(путьКФайлуНастроек);
	_ФайлНастроек = файлНастроек.ПолноеИмя;    
	_лог.Отладка( "Файл настроек = " + _ФайлНастроек );
	
	_файлыОшибок = Новый Массив;
	
	Для каждого цПутьКФайлу Из СтрРазделить( файлыОшибок, ",") Цикл
		
		файлЗадачи = Новый Файл(цПутьКФайлу);
		
		Если файлЗадачи.Существует()
			И файлЗадачи.ЭтоФайл() Тогда
			
			_файлыОшибок.Добавить(файлЗадачи.ПолноеИмя);
			
			_лог.Отладка( "Добавлен файл generic-issue = " + файлЗадачи.ПолноеИмя );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрименитьНастройки( пОшибка, таблицаНастроек )
	
	естьИзменения = Ложь;
	
	ruleId = пОшибка.ruleId;
	message = пОшибка.primaryLocation.message;
	filePath = пОшибка.primaryLocation.filePath;
	
	заголовокЛога = СтрШаблон( "ruleId: <%1>, message: <%2>, filePath: <%3>. Установлено ", 
	ruleId,
	message,
	filePath);
	
	Для каждого цСтрока Из таблицаНастроек Цикл
		
		Если НастройкаПрименима( ruleId, цСтрока.ruleId )
			И НастройкаПрименима( message, цСтрока.message )
			И НастройкаПрименима( filePath, цСтрока.filePath ) Тогда
			
			Если ТипЗнч( цСтрока.effortMinutes ) = Тип("Число")
				И Не цСтрока.effortMinutes = пОшибка.effortMinutes Тогда
				
				_лог.Отладка( заголовокЛога + "effortMinutes: " + цСтрока.effortMinutes );
				
				пОшибка.effortMinutes = цСтрока.effortMinutes;
				естьИзменения = Истина;
				
			КонецЕсли;
			
			Если Не цСтрока.severity = пОшибка.severity 
				И (цСтрока.severity = "BLOCKER"
				ИЛИ цСтрока.severity = "CRITICAL"
				ИЛИ цСтрока.severity = "MAJOR"
				ИЛИ цСтрока.severity = "MINOR"
				ИЛИ цСтрока.severity = "INFO") Тогда
				
				_лог.Отладка( заголовокЛога + "severity: " + цСтрока.severity );
				
				пОшибка.severity = цСтрока.severity;
				естьИзменения = Истина;
				
			КонецЕсли;
			
			Если Не цСтрока.type = пОшибка.type
				И (цСтрока.type = "BUG"
				ИЛИ цСтрока.type = "VULNERABILITY"
				ИЛИ цСтрока.type = "CODE_SMELL") Тогда
				
				_лог.Отладка( заголовокЛога + "type: " + цСтрока.type );
				
				пОшибка.type = цСтрока.type;
				естьИзменения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат естьИзменения;
	
КонецФункции

Функция НастройкаПрименима( пСтрока, пШаблон)
	
	Если пСтрока = пШаблон Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( пШаблон ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		регВыражение = Новый РегулярноеВыражение( пШаблон );
		Возврат регВыражение.Совпадает( пСтрока );
		
	Исключение
		
		_Лог.Ошибка("Ошибка сравнения ""%1"" с рег. выражением ""%2""", пСтрока, пШаблон);
		_Лог.Ошибка(ОписаниеОшибки());
		Возврат Ложь;

	КонецПопытки;
	
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.edtExport";
КонецФункции

_Лог = Логирование.ПолучитьЛог(ИмяЛога());